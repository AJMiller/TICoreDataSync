<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/FZAKeyManager.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/FZAKeyManager</TokenIdentifier>
			<Abstract>FZAKeyManager is an abstract class for creating and managing encryption keys.</Abstract>
			<DeclaredIn>FZAKeyManager.h</DeclaredIn>
			
			<NodeRef refid="2"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/FZAKeyManager/hasKey</TokenIdentifier>
			<Abstract>Report on whether the key manager already has a key to use.</Abstract>
			<DeclaredIn>FZAKeyManager.h</DeclaredIn>			
			
			<Declaration>- (BOOL)hasKey</Declaration>
			
			
			<Anchor>//api/name/hasKey</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/FZAKeyManager/randomDataOfLength:</TokenIdentifier>
			<Abstract>Create some random data.</Abstract>
			<DeclaredIn>FZAKeyManager.h</DeclaredIn>			
			
			<Declaration>- (NSData *)randomDataOfLength:(NSInteger)length</Declaration>
			<Parameters>
				<Parameter>
					<Name>length</Name>
					<Abstract>The number of bytes of randomness needed.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>The random data.</Abstract></ReturnValue>
			<Anchor>//api/name/randomDataOfLength:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/FZAKeyManager/keyFromPassword:salt:</TokenIdentifier>
			<Abstract>Generate a key from a password.</Abstract>
			<DeclaredIn>FZAKeyManager.h</DeclaredIn>			
			
			<Declaration>- (NSData *)keyFromPassword:(NSString *)password salt:(NSData *)salt</Declaration>
			<Parameters>
				<Parameter>
					<Name>password</Name>
					<Abstract>The string to use as the password.</Abstract>
				</Parameter><Parameter>
					<Name>salt</Name>
					<Abstract>The salt data to use.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>A data key.</Abstract></ReturnValue>
			<Anchor>//api/name/keyFromPassword:salt:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/FZAKeyManager/storeKeyDerivedFromPassword:salt:error:</TokenIdentifier>
			<Abstract>Set a new key derived from a password supplied by the user.</Abstract>
			<DeclaredIn>FZAKeyManager.h</DeclaredIn>			
			
			<Declaration>- (BOOL)storeKeyDerivedFromPassword:(NSString *)password salt:(NSData *)salt error:(NSError **)error</Declaration>
			<Parameters>
				<Parameter>
					<Name>password</Name>
					<Abstract>The string to use as the password.</Abstract>
				</Parameter><Parameter>
					<Name>salt</Name>
					<Abstract>Some random data fed into the key derivation function.</Abstract>
				</Parameter><Parameter>
					<Name>error</Name>
					<Abstract>Any error that occurs.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>YES if the key was stored succcessfully, NO if not (error will be set).</Abstract></ReturnValue>
			<Anchor>//api/name/storeKeyDerivedFromPassword:salt:error:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/FZAKeyManager/key</TokenIdentifier>
			<Abstract>Retrieve and return the key from cryptographic storage.</Abstract>
			<DeclaredIn>FZAKeyManager.h</DeclaredIn>			
			
			<Declaration>- (NSData *)key</Declaration>
			
			
			<Anchor>//api/name/key</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/FZAKeyManager/newKeyManager</TokenIdentifier>
			<Abstract>Return a new subclass of this class, appropriate to the current platform.</Abstract>
			<DeclaredIn>FZAKeyManager.h</DeclaredIn>			
			
			<Declaration>+ (FZAKeyManager *)newKeyManager</Declaration>
			
			
			<Anchor>//api/name/newKeyManager</Anchor>
		</Token>
		
	</File>
</Tokens>