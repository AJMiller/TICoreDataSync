<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/FZACryptor.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/FZACryptor</TokenIdentifier>
			<Abstract>FZACryptor is the public interface to the TICoreDataSync encryption module.</Abstract>
			<DeclaredIn>FZACryptor.h</DeclaredIn>
			
			<NodeRef refid="1"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/FZACryptor/isConfigured</TokenIdentifier>
			<Abstract>Reports whether this object has already got a key and can be used for crypto operations.</Abstract>
			<DeclaredIn>FZACryptor.h</DeclaredIn>			
			
			<Declaration>- (BOOL)isConfigured</Declaration>
			
			<ReturnValue><Abstract>YES if the object is ready to be used for crypto.</Abstract></ReturnValue>
			<Anchor>//api/name/isConfigured</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/FZACryptor/setPassword:salt:</TokenIdentifier>
			<Abstract>Set a new password to be used for protecting the encrypted content.</Abstract>
			<DeclaredIn>FZACryptor.h</DeclaredIn>			
			
			<Declaration>- (NSData *)setPassword:(NSString *)password salt:(NSData *)salt</Declaration>
			<Parameters>
				<Parameter>
					<Name>password</Name>
					<Abstract>The password to use.</Abstract>
				</Parameter><Parameter>
					<Name>salt</Name>
					<Abstract>Some random data to salt the password. If this is nil, the method will
             generate its own salt from a random oracle.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>The data used for salting the password. If this object needed to create salt material and couldn't, it will return nil. In this case, the key used for encryption has not been set, and the object is not configured.</Abstract></ReturnValue>
			<Anchor>//api/name/setPassword:salt:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/FZACryptor/encryptFileAtLocation:writingToLocation:error:</TokenIdentifier>
			<Abstract>Encrypt the content of a file, storing the encrypted data in another file.</Abstract>
			<DeclaredIn>FZACryptor.h</DeclaredIn>			
			
			<Declaration>- (BOOL)encryptFileAtLocation:(NSURL *)plainTextURL writingToLocation:(NSURL *)cipherTextURL error:(NSError **)error</Declaration>
			<Parameters>
				<Parameter>
					<Name>plainTextURL</Name>
					<Abstract>The URL of the file to be encrypted.</Abstract>
				</Parameter><Parameter>
					<Name>cipherTextURL</Name>
					<Abstract>The URL of the file to write the encrypted file. Any existing content will be blindly truncated.</Abstract>
				</Parameter><Parameter>
					<Name>error</Name>
					<Abstract>Possible errors include no password being configured or the keychain item being corrupted, or not being able to read from the source or  write to the destination. The error codes come from CommonCrypto/CommonCryptor.h.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>YES if the encryption succeeds, otherwise NO and the error is set.</Abstract></ReturnValue>
			<Anchor>//api/name/encryptFileAtLocation:writingToLocation:error:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/FZACryptor/decryptFileAtLocation:writingToLocation:error:</TokenIdentifier>
			<Abstract>Decrypt the content of a file, storing the clear-text data in another file.</Abstract>
			<DeclaredIn>FZACryptor.h</DeclaredIn>			
			
			<Declaration>- (BOOL)decryptFileAtLocation:(NSURL *)cipherTextURL writingToLocation:(NSURL *)plainTextURL error:(NSError **)error</Declaration>
			<Parameters>
				<Parameter>
					<Name>cipherTextURL</Name>
					<Abstract>The file to be decrypted.</Abstract>
				</Parameter><Parameter>
					<Name>plainTextURL</Name>
					<Abstract>The location to write the decrypted file. Any existing content will be blindly truncated.</Abstract>
				</Parameter><Parameter>
					<Name>error</Name>
					<Abstract>Possible errors include no password being configured or the keychain item being corrupted, not being able to read from the source or write to the destination, or the cipher text file not being in the expected format. Errors come either from CommonCrypto/CommonCryptor.h or from the enumeration at the end of TICDSTypesAndEnums.h.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>YES if the decryption succeeds, otherwise NO and the error is set.</Abstract></ReturnValue>
			<Anchor>//api/name/decryptFileAtLocation:writingToLocation:error:</Anchor>
		</Token>
		
	</File>
</Tokens>